// <auto-generated />
using System;
using DataAccessLayer.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(FleetContext))]
    [Migration("20220418135836_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccessLayer.Model.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("Zipcode")
                        .HasColumnType("int");

                    b.HasKey("AddressID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Brand", b =>
                {
                    b.Property<int>("BrandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("BrandID");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Driver", b =>
                {
                    b.Property<int>("DriverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("FuelCardID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("NationalInsuranceNr")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int?>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("DriverID");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("DataAccessLayer.Model.DriverDriverLicenseType", b =>
                {
                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<int>("DriverLicenseTypeID")
                        .HasColumnType("int");

                    b.HasKey("DriverID", "DriverLicenseTypeID");

                    b.HasIndex("DriverLicenseTypeID");

                    b.ToTable("DriverDriverLicenseType");
                });

            modelBuilder.Entity("DataAccessLayer.Model.DriverLicenseType", b =>
                {
                    b.Property<int>("DriverLicenseTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("DriverLicenseTypeID");

                    b.ToTable("DriverLicenseType");
                });

            modelBuilder.Entity("DataAccessLayer.Model.FuelCard", b =>
                {
                    b.Property<int>("FuelCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("DriverID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<int?>("Pincode")
                        .HasColumnType("int");

                    b.HasKey("FuelCardID");

                    b.HasIndex("DriverID")
                        .IsUnique()
                        .HasFilter("[DriverID] IS NOT NULL");

                    b.ToTable("FuelCard");
                });

            modelBuilder.Entity("DataAccessLayer.Model.FuelCardFuelType", b =>
                {
                    b.Property<int>("FuelCardID")
                        .HasColumnType("int");

                    b.Property<int>("FuelTypeID")
                        .HasColumnType("int");

                    b.HasKey("FuelCardID", "FuelTypeID");

                    b.HasIndex("FuelTypeID");

                    b.ToTable("FuelCardFuelType");
                });

            modelBuilder.Entity("DataAccessLayer.Model.FuelType", b =>
                {
                    b.Property<int>("FuelTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("FuelTypeID");

                    b.ToTable("FuelType");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Vehicle", b =>
                {
                    b.Property<int>("VehicleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AmountDoors")
                        .HasColumnType("int");

                    b.Property<int>("BrandID")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("DriverID")
                        .HasColumnType("int");

                    b.Property<int>("FuelTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("VehicleTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasColumnType("nvarchar(17)")
                        .HasMaxLength(17);

                    b.HasKey("VehicleID");

                    b.HasIndex("BrandID");

                    b.HasIndex("DriverID")
                        .IsUnique()
                        .HasFilter("[DriverID] IS NOT NULL");

                    b.HasIndex("FuelTypeID");

                    b.HasIndex("VehicleTypeID");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("DataAccessLayer.Model.VehicleType", b =>
                {
                    b.Property<int>("VehicleTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("VehicleTypeID");

                    b.ToTable("VehicleType");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Address", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Driver", "Driver")
                        .WithOne("Address")
                        .HasForeignKey("DataAccessLayer.Model.Address", "AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Model.DriverDriverLicenseType", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Driver", "Driver")
                        .WithMany("DriverDriverLicenseType")
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.DriverLicenseType", "DriverLicenseType")
                        .WithMany("DriverDriverLicenseType")
                        .HasForeignKey("DriverLicenseTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Model.FuelCard", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Driver", "Driver")
                        .WithOne("FuelCard")
                        .HasForeignKey("DataAccessLayer.Model.FuelCard", "DriverID");
                });

            modelBuilder.Entity("DataAccessLayer.Model.FuelCardFuelType", b =>
                {
                    b.HasOne("DataAccessLayer.Model.FuelCard", "FuelCard")
                        .WithMany("FuelCardFuelType")
                        .HasForeignKey("FuelCardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.FuelType", "FuelType")
                        .WithMany("FuelCardFuelType")
                        .HasForeignKey("FuelTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Model.Vehicle", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Brand", "Brand")
                        .WithMany("Vehicle")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Driver", "Driver")
                        .WithOne("Vehicle")
                        .HasForeignKey("DataAccessLayer.Model.Vehicle", "DriverID");

                    b.HasOne("DataAccessLayer.Model.FuelType", "FuelType")
                        .WithMany("Vehicle")
                        .HasForeignKey("FuelTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.VehicleType", "VehicleType")
                        .WithMany("Vehicle")
                        .HasForeignKey("VehicleTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
